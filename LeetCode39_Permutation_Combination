
给定一个数组，返回该数组的全排列（Permutation）和所有组合（Combination）

Permutation:
Input: [1,2,3], 2 (2表示从数组中选两个元素）
Output: [ [1,2], [1,3], [2,1], [2,3], [3,1], [3,2] ]

Combination:
Input: [1,2,3], 2 (2表示从数组中选两个元素）
Output： [ [1,2], [1,3], [2,3] ] （因为Combination的结果没有顺序，所以[1,2]和[2,1]相当于同一个）


def Combination(condidates, target):
  res = [[]]
  cur = []
  candidates = sorted(candidates)
  dfs(candidates, target, 0, cur, res)
  res.pop(0)
  return res
  
def dfs(candidates, target, s, cur, ans):                 # s表示：“从candidates数组的第s个元素开始，向后进行遍历”
  if target == 0:
    ans.append(cur[:])
    return
  for i in range(s, len(candidates)):
    if candidates[i] > target:
      break
    cur.append(candidates[i])
    dfs(candidates, target - candidates[i], i, cur, ans)  # 如果candidates数组的元素可以重复使用，则第三个参数为 i；不能重复使用的话，第三个参数为 i+1
    cur.pop()


===============================================================
LeetCode 40 Combination Sum II

def combinationSum2(self, candidates, target):
    """
    :type candidates: List[int]
    :type target: int
    :rtype: List[List[int]]
    """
    res = [[]]
    cur = []
    candidates = sorted(candidates)
    dfs(candidates, target, 0, cur, res)
    res.pop(0)                                                  # 不加这一行，最终res会变成[ [], [1,1,6],[1,2,5],[1,7],[2,6] ]，多出一个空集，所以要pop掉
    return res

def dfs(candidates, target, s, cur, ans):                       # s表示：“从candidates数组的第s个元素开始，向后进行遍历”
    if target == 0 and cur not in ans:                          # 如果当前数组cur的元素之和等于target，但已经在最终结果res中出现过，就不再向res中添加curr
        ans.append(cur[:])                                      # 不要忘记[:]
        return
    for i in range(s, len(candidates)):
        if candidates[i] > target:                              # 当添加当前元素后，和 大于target，就不再对之后的路径进行遍历，相当于剪枝。也是该算法较快的原因
            break
        cur.append(candidates[i])
        dfs(candidates, target - candidates[i], i+1, cur, ans)  # 如果candidates数组的元素可以重复使用，则第三个参数为 i；不能重复使用的话，第三个参数为 i+1
        cur.pop()

# 另外一点就是，在递归层（倒数第二行 dfs(candidates...)），我们每次递归，都将target 减掉 当前层的元素 candidates[i]


==============================================================================================================================
==============================================================================================================================
（以上是Combination）接下来是Permutation：


LeetCode 90 Subsets II
Input: [1,2,2]
Output: [ [2],[1],[1,2,2],[2,2],[1,2],[] ]

def subsetsWithDup(self, nums):
    """
    :type nums: List[int]
    :rtype: List[List[int]]
    """
    res = [[]]
    if not nums or len(nums) == 0:
        return res
    nums = sorted(nums)
    dfs(nums, 0, res, [])
    return res
        
def dfs(nums, s, res, cur):
    if cur not in res:
        res.append(cur[:])
    for i in range(s, len(nums)):
        if i > s and nums[i] == nums[i-1]:
            continue
        cur.append(nums[i])
        dfs(nums, i+1, res, cur)
        cur.pop()









