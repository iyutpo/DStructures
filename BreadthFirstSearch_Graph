深度优先搜索——图

在继续使用其他图算法之前，让我们分析广度优先搜索算法的运行时性能。首先要观察的是，对于图中的每个顶点 |V| 最多执行一次 while 循环。因为一个顶点必须是白色，才能被检查和添加到队列。这给出了用于 while 循环的 O(v)。嵌套在 while 内部的 for 循环对于图中的每个边执行最多一次，|E|。原因是每个顶点最多被出列一次，并且仅当节点 u 出队时，我们才检查从节点 u 到节点 v 的边。这给出了用于 for 循环的 O(E) 。组合这两个环路给出了 O(V+E)。

当然做广度优先搜索只是任务的一部分。从起始节点到目标节点的链接之后是任务的另一部分。最糟糕的情况是，如果图是单个长链。在这种情况下，遍历所有顶点将是 O(V)。正常情况将是 |V| 的一小部分但我们仍然写 O(V)。

除了为Graph创建一个Graph类之外， 我们还可以直接用一个字典来实现一个Graph。字典的键值为Graph的节点名（id），节点名所对应的值（Value）为 与该节点相连的其他节点的名字（id）。这个值（Value）可以是一个数组，也可以是一个集合（set）。例如：
graph = {'A': ['B', 'C', 'E'],
         'B': ['A','D', 'E'],
         'C': ['A', 'F', 'G'],
         'D': ['B'],
         'E': ['A', 'B','D'],
         'F': ['C'],
         'G': ['C']}
def bfs(graph, start):
  visited = []
  queue = [start]
  while queue:
    node = queue.pop(0)
    if node not in visited:
      visited.append(node)              
      neighbors = graph[node]             # 相邻顶点
      for neighbor in neighbors:          # 将相邻顶点遍历，并存入queue中
        queue.append(neighbor)
  return visited
print(bfs(graph, list(graph.keys())[0]))  # list(graph.keys())[0]也可以换成 'A' （含引号）
>> ['A', 'B', 'C', 'E', 'D', 'F', 'G']

graph:
                  A ----- C 
                / |       | \
              B   |       F  G
             /  \ |
           D ---- E
            
            
            
