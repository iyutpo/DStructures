深度优先搜索——图

# 深度优先DFS。深度优先搜索可以创建于一棵树或多棵树。当创建于多棵树时，我们称之为深度优先森林。
# 与广度优先类似的是，我们的深度优先搜索使用前导链接来构造树。

首先定义一个Graph：
注意，graph中的Value是集合，这是为了方便我们在之后的dfs函数中寻找 当前节点的相邻节点 与 已经遍历的节点 之间的差集，即 graph[start] - visited

gdict = { "a" : set(["b","c"]),
          "b" : set(["a", "d"]),
          "c" : set(["a", "d"]),
          "d" : set(["e"]),
          "e" : set(["a"])
        }
        
# 定义深度优先搜索函数 dfs：
class graph:
  def __init__(self,gdict=None):
    if gdict is None:
      gdict = {}
    self.gdict = gdict

def dfs(graph, start, visited = None):
  if visited is None:
    visited = set()
  visited.add(start)
  print(start)
  for next in graph[start] - visited:   # 对 当前节点的相邻节点 与 已经遍历的节点 之间的差集 进行遍历
    dfs(graph, next, visited)
  return visited

>> dfs(gdict, 'a')
>> a
c
d
e
b




######
用迭代（iteration）的方式实现DFS:
class Graph:  
  def __init__(self, numvertices): 
    self.numvertices = numvertices
    self.neighbors = [[] for i in range(numvertices)] 
  def addEdge(self, v1, v2): 
    self.neighbors[v1].append(v2) # Add v2 to v1’s list. 

  # prints all not yet visited vertices  
  # reachable from s  
  def DFSUtil(self, s, visited): 
    # Create a stack for DFS  
    stack = [] 
    # Push the current source node.  
    stack.append(s)  
    while (len(stack) != 0): 
      # Pop a vertex from stack and print  
      s = stack.pop() 
      # Stack may contain same vertex twice.  
      # So we need to prthe popped item only  
      # if it is not visited.  
      if (not visited[s]): 
        print(s, end = " ")  
        visited[s] = True
        # Get all adjacent vertices of the  
        # popped vertex s. If a adjacent has not   
        # been visited, then push it to the stack. 
        i = 0
        while i < len(self.neighbors[s]): 
          if (not visited[self.neighbors[s][i]]):  
            stack.append(self.neighbors[s][i]) 
          i += 1
  # prints all vertices in DFS manner  
  def DFS(self): 
    # Mark all the vertices as not visited  
    visited = [False] * self.numvertices
    for i in range(self.numvertices): 
      if (not visited[i]): 
        self.DFSUtil(i, visited) 

# Driver Code 
if __name__ == '__main__': 
  g = Graph(5) # Total 5 vertices in graph  
  g.addEdge(1, 0)  
  g.addEdge(2, 1)  
  g.addEdge(3, 4)  
  g.addEdge(4, 0)  
  print("Following is Depth First Traversal")  
  g.DFS() 

>> 0 1 2 3 4



